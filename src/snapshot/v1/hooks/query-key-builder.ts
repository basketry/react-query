/**
 * This code was generated by @basketry/react-query@{{version}}
 *
 * Changes to this file may cause incorrect behavior and will be lost if
 * the code is regenerated.
 *
 * To make changes to the contents of this file:
 * 1. Edit source/path.ext
 * 2. Run the Basketry CLI
 *
 * About Basketry: https://github.com/basketry/basketry/wiki
 * About @basketry/react-query: https://github.com/basketry/react-query#readme
 */

import type {
  AllAuthSchemesParams,
  ComboAuthSchemesParams,
  CreateGizmoParams,
  CreateWidgetParams,
  DeleteWidgetFooParams,
  ExhaustiveFormatsParams,
  ExhaustiveParamsParams,
  GetGizmosParams,
  GetWidgetFooParams,
  GetWidgetsParams,
  PutWidgetParams,
  UpdateGizmoParams,
  UploadGizmoParams,
} from '../types';

/**
 * Type mapping for all available query keys in the service
 */
export interface QueryKeyMap {
  gizmo: {
    getGizmos: GetGizmosParams | undefined;
    createGizmo: CreateGizmoParams | undefined;
    updateGizmo: UpdateGizmoParams | undefined;
    uploadGizmo: UploadGizmoParams;
  };
  widget: {
    getWidgets: GetWidgetsParams | undefined;
    createWidget: CreateWidgetParams | undefined;
    putWidget: PutWidgetParams | undefined;
    getWidgetFoo: GetWidgetFooParams;
    deleteWidgetFoo: DeleteWidgetFooParams;
  };
  exhaustive: {
    exhaustiveFormats: ExhaustiveFormatsParams | undefined;
    exhaustiveParams: ExhaustiveParamsParams;
  };
  authPermutation: {
    allAuthSchemes: AllAuthSchemesParams | undefined;
    comboAuthSchemes: ComboAuthSchemesParams | undefined;
  };
}

/**
 * Extract all service names from QueryKeyMap
 */
export type ServiceKeys = keyof QueryKeyMap;

/**
 * Extract operation names for a given service
 */
export type OperationKeys<S extends ServiceKeys> = keyof QueryKeyMap[S];

/**
 * Extract parameter type for a given service and operation
 */
export type OperationParams<
  S extends ServiceKeys,
  O extends OperationKeys<S>,
> = QueryKeyMap[S][O];

/**
 * Build type-safe query keys for React Query cache operations
 *
 * @example
 * // Match all queries for a service
 * matchQueryKey("widget")
 * // Returns: ["widget"]
 *
 * @example
 * // Match all queries for a specific operation
 * matchQueryKey("widget", "getWidgets")
 * // Returns: ["widget", "getWidgets"]
 *
 * @example
 * // Match specific query with parameters
 * matchQueryKey("widget", "getWidgets", { status: "active" })
 * // Returns: ["widget", "getWidgets", { status: "active" }]
 */
export function matchQueryKey<S extends ServiceKeys>(service: S): readonly [S];

export function matchQueryKey<
  S extends ServiceKeys,
  O extends OperationKeys<S>,
>(service: S, operation: O): readonly [S, O];

export function matchQueryKey<
  S extends ServiceKeys,
  O extends OperationKeys<S>,
>(
  service: S,
  operation: O,
  params: OperationParams<S, O> extends undefined
    ? undefined
    : OperationParams<S, O>,
): readonly [
  S,
  O,
  OperationParams<S, O> extends undefined ? {} : OperationParams<S, O>,
];

export function matchQueryKey<
  S extends ServiceKeys,
  O extends OperationKeys<S>,
>(service: S, operation?: O, params?: OperationParams<S, O>) {
  if (arguments.length === 3) {
    // When called with 3 arguments, always include params (use {} if undefined)
    const finalParams = params === undefined ? {} : params;
    return [service, operation!, finalParams] as const;
  }
  if (operation !== undefined) {
    return [service, operation] as const;
  }
  return [service] as const;
}
