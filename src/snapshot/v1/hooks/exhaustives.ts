/**
 * This code was generated by @basketry/react-query@{{version}}
 *
 * Changes to this file may cause incorrect behavior and will be lost if
 * the code is regenerated.
 *
 * To make changes to the contents of this file:
 * 1. Edit source/path.ext
 * 2. Run the Basketry CLI
 *
 * About Basketry: https://basketry.io
 * About @basketry/react-query: https://basketry.io/docs/components/@basketry/react-query
 */

import {
  queryOptions,
  type UndefinedInitialDataOptions,
  useQuery,
  useSuspenseQuery,
} from '@tanstack/react-query';
import type {
  Error,
  ExhaustiveFormatsParams,
  ExhaustiveParamsParams,
} from '../types';
import { getExhaustiveService } from './context';
import { guard, type QueryError } from './runtime';

// Query and mutation options exports for React Query v5

export const exhaustiveFormatsQueryOptions = (
  params?: ExhaustiveFormatsParams,
) => {
  const exhaustiveService = getExhaustiveService();
  return queryOptions({
    queryKey: ['exhaustive', 'exhaustiveFormats', params || {}],
    queryFn: async () => {
      const res = await guard(exhaustiveService.exhaustiveFormats(params));
      if (res.errors.length) {
        const handled: QueryError<Error[]> = {
          kind: 'handled',
          payload: res.errors,
        };
        throw handled;
      }
      return res;
    },
    select: (data) => data.data,
  });
};

export const exhaustiveParamsQueryOptions = (
  params: ExhaustiveParamsParams,
) => {
  const exhaustiveService = getExhaustiveService();
  return queryOptions({
    queryKey: ['exhaustive', 'exhaustiveParams', params || {}],
    queryFn: async () => {
      const res = await guard(exhaustiveService.exhaustiveParams(params));
      if (res.errors.length) {
        const handled: QueryError<Error[]> = {
          kind: 'handled',
          payload: res.errors,
        };
        throw handled;
      }
      return res;
    },
    select: (data) => data.data,
  });
};

// Legacy hooks - deprecated, use query/mutation options exports instead

/** @deprecated Use exhaustiveFormatsQueryOptions with useQuery instead */
export function useExhaustiveFormats(
  params?: ExhaustiveFormatsParams,
  options?: Omit<
    UndefinedInitialDataOptions<void, QueryError<Error[]>, void>,
    'queryKey' | 'queryFn' | 'select'
  >,
) {
  const defaultOptions = exhaustiveFormatsQueryOptions(params);
  return useQuery({ ...defaultOptions, ...options });
}

/** @deprecated Use exhaustiveFormatsQueryOptions with useSuspenseQuery instead */
export function useExhaustiveFormats(
  params?: ExhaustiveFormatsParams,
  options?: Omit<
    UndefinedInitialDataOptions<void, QueryError<Error[]>, void>,
    'queryKey' | 'queryFn' | 'select'
  >,
) {
  const defaultOptions = exhaustiveFormatsQueryOptions(params);
  return useSuspenseQuery({ ...defaultOptions, ...options });
}

/** @deprecated Use exhaustiveParamsQueryOptions with useQuery instead */
export function useExhaustiveParams(
  params: ExhaustiveParamsParams,
  options?: Omit<
    UndefinedInitialDataOptions<void, QueryError<Error[]>, void>,
    'queryKey' | 'queryFn' | 'select'
  >,
) {
  const defaultOptions = exhaustiveParamsQueryOptions(params);
  return useQuery({ ...defaultOptions, ...options });
}

/** @deprecated Use exhaustiveParamsQueryOptions with useSuspenseQuery instead */
export function useExhaustiveParams(
  params: ExhaustiveParamsParams,
  options?: Omit<
    UndefinedInitialDataOptions<void, QueryError<Error[]>, void>,
    'queryKey' | 'queryFn' | 'select'
  >,
) {
  const defaultOptions = exhaustiveParamsQueryOptions(params);
  return useSuspenseQuery({ ...defaultOptions, ...options });
}
