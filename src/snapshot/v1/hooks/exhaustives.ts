/**
 * This code was generated by @basketry/react-query@{{version}}
 *
 * Changes to this file may cause incorrect behavior and will be lost if
 * the code is regenerated.
 *
 * To make changes to the contents of this file:
 * 1. Edit source/path.ext
 * 2. Run the Basketry CLI
 *
 * About Basketry: https://github.com/basketry/basketry/wiki
 * About @basketry/react-query: https://github.com/basketry/react-query#readme
 */

import {
  queryOptions,
  useQuery,
  useSuspenseQuery,
} from '@tanstack/react-query';
import type { ExhaustiveFormatsParams, ExhaustiveParamsParams } from '../types';
import { getExhaustiveService } from './context';
import { CompositeError } from './runtime';

export const exhaustiveFormatsQueryOptions = (
  params?: ExhaustiveFormatsParams,
) => {
  const exhaustiveService = getExhaustiveService();
  return queryOptions({
    queryKey: ['exhaustive', 'exhaustiveFormats', params || {}] as const,
    queryFn: async () => {
      const res = await exhaustiveService.exhaustiveFormats(params);
      if (res.errors.length) {
        throw new CompositeError(res.errors);
      } else if (!res.data) {
        throw new Error('Unexpected data error: Failed to get example');
      }
      return res;
    },
    select: (data) => data.data,
  });
};

/**
 * @deprecated This hook is deprecated and will be removed in a future version.
 * Please use the new query options pattern instead:
 *
 * ```typescript
 * import { useQuery } from '@tanstack/react-query';
 * import { exhaustiveFormatsQueryOptions } from './hooks/exhaustive';
 *
 * // Old pattern (deprecated)
 * const result = useExhaustiveFormats(params);
 *
 * // New pattern
 * const result = useQuery(exhaustiveFormatsQueryOptions(params));
 * ```
 */
export const useExhaustiveFormats = (params?: ExhaustiveFormatsParams) => {
  return useQuery(exhaustiveFormatsQueryOptions(params));
};

/**
 * @deprecated This hook is deprecated and will be removed in a future version.
 * Please use the new query options pattern instead:
 *
 * ```typescript
 * import { useSuspenseQuery } from '@tanstack/react-query';
 * import { exhaustiveFormatsQueryOptions } from './hooks/exhaustive';
 *
 * // Old pattern (deprecated)
 * const result = useSuspenseExhaustiveFormats(params);
 *
 * // New pattern
 * const result = useSuspenseQuery(exhaustiveFormatsQueryOptions(params));
 * ```
 */
export const useSuspenseExhaustiveFormats = (
  params?: ExhaustiveFormatsParams,
) => {
  return useSuspenseQuery(exhaustiveFormatsQueryOptions(params));
};

export const exhaustiveParamsQueryOptions = (
  params: ExhaustiveParamsParams,
) => {
  const exhaustiveService = getExhaustiveService();
  return queryOptions({
    queryKey: ['exhaustive', 'exhaustiveParams', params || {}] as const,
    queryFn: async () => {
      const res = await exhaustiveService.exhaustiveParams(params);
      if (res.errors.length) {
        throw new CompositeError(res.errors);
      } else if (!res.data) {
        throw new Error('Unexpected data error: Failed to get example');
      }
      return res;
    },
    select: (data) => data.data,
  });
};

/**
 * @deprecated This hook is deprecated and will be removed in a future version.
 * Please use the new query options pattern instead:
 *
 * ```typescript
 * import { useQuery } from '@tanstack/react-query';
 * import { exhaustiveParamsQueryOptions } from './hooks/exhaustive';
 *
 * // Old pattern (deprecated)
 * const result = useExhaustiveParams(params);
 *
 * // New pattern
 * const result = useQuery(exhaustiveParamsQueryOptions(params));
 * ```
 */
export const useExhaustiveParams = (params: ExhaustiveParamsParams) => {
  return useQuery(exhaustiveParamsQueryOptions(params));
};

/**
 * @deprecated This hook is deprecated and will be removed in a future version.
 * Please use the new query options pattern instead:
 *
 * ```typescript
 * import { useSuspenseQuery } from '@tanstack/react-query';
 * import { exhaustiveParamsQueryOptions } from './hooks/exhaustive';
 *
 * // Old pattern (deprecated)
 * const result = useSuspenseExhaustiveParams(params);
 *
 * // New pattern
 * const result = useSuspenseQuery(exhaustiveParamsQueryOptions(params));
 * ```
 */
export const useSuspenseExhaustiveParams = (params: ExhaustiveParamsParams) => {
  return useSuspenseQuery(exhaustiveParamsQueryOptions(params));
};
