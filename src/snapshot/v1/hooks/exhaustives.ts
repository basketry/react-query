/**
 * This code was generated by @basketry/react-query@{{version}}
 *
 * Changes to this file may cause incorrect behavior and will be lost if
 * the code is regenerated.
 *
 * To make changes to the contents of this file:
 * 1. Edit source/path.ext
 * 2. Run the Basketry CLI
 *
 * About Basketry: https://github.com/basketry/basketry/wiki
 * About @basketry/react-query: https://github.com/basketry/react-query#readme
 */

import {
  queryOptions,
  type UndefinedInitialDataOptions,
  useQuery,
  useSuspenseQuery,
} from '@tanstack/react-query';
import type { ExhaustiveFormatsParams, ExhaustiveParamsParams } from '../types';
import { getExhaustiveService, useExhaustiveService } from './context';
import { CompositeError } from './runtime';

/**
 * @deprecated
 */
export function useExhaustiveFormats(
  params?: ExhaustiveFormatsParams,
  options?: Omit<
    UndefinedInitialDataOptions<
      void,
      Error,
      void | undefined,
      (string | Record<string, string | number | boolean>)[]
    >,
    'queryKey' | 'queryFn' | 'select'
  >,
) {
  const defaultOptions = useExhaustiveFormatsQueryOptions(params);
  return useQuery({ ...defaultOptions, ...options });
}

/**
 * @deprecated
 */
export function useSuspenseExhaustiveFormats(
  params?: ExhaustiveFormatsParams,
  options?: Omit<
    UndefinedInitialDataOptions<
      void,
      Error,
      void | undefined,
      (string | Record<string, string | number | boolean>)[]
    >,
    'queryKey' | 'queryFn' | 'select'
  >,
) {
  const defaultOptions = useExhaustiveFormatsQueryOptions(params);
  return useSuspenseQuery({ ...defaultOptions, ...options });
}

/**
 * @deprecated
 */
export function useExhaustiveParams(
  params: ExhaustiveParamsParams,
  options?: Omit<
    UndefinedInitialDataOptions<
      void,
      Error,
      void | undefined,
      (string | Record<string, string | number | boolean>)[]
    >,
    'queryKey' | 'queryFn' | 'select'
  >,
) {
  const defaultOptions = useExhaustiveParamsQueryOptions(params);
  return useQuery({ ...defaultOptions, ...options });
}

/**
 * @deprecated
 */
export function useSuspenseExhaustiveParams(
  params: ExhaustiveParamsParams,
  options?: Omit<
    UndefinedInitialDataOptions<
      void,
      Error,
      void | undefined,
      (string | Record<string, string | number | boolean>)[]
    >,
    'queryKey' | 'queryFn' | 'select'
  >,
) {
  const defaultOptions = useExhaustiveParamsQueryOptions(params);
  return useSuspenseQuery({ ...defaultOptions, ...options });
}

const useExhaustiveFormatsQueryOptions = (params?: ExhaustiveFormatsParams) => {
  const exhaustiveService = useExhaustiveService();
  return queryOptions({
    queryKey: ['exhaustive', 'exhaustiveFormats', params || {}],
    queryFn: async () => {
      const res = await exhaustiveService.exhaustiveFormats(params);
      if (res.errors.length) {
        throw new CompositeError(res.errors);
      } else if (!res.data) {
        throw new Error('Unexpected data error: Failed to get example');
      }
      return res;
    },
    select: (data) => data.data,
  });
};

export const exhaustiveFormatsQueryOptions = (
  params?: ExhaustiveFormatsParams,
) => {
  const exhaustiveService = getExhaustiveService();
  return queryOptions({
    queryKey: ['exhaustive', 'exhaustiveFormats', params || {}],
    queryFn: async () => {
      const res = await exhaustiveService.exhaustiveFormats(params);
      if (res.errors.length) {
        throw new CompositeError(res.errors);
      } else if (!res.data) {
        throw new Error('Unexpected data error: Failed to get example');
      }
      return res;
    },
    select: (data) => data.data,
  });
};
const useExhaustiveParamsQueryOptions = (params: ExhaustiveParamsParams) => {
  const exhaustiveService = useExhaustiveService();
  return queryOptions({
    queryKey: ['exhaustive', 'exhaustiveParams', params || {}],
    queryFn: async () => {
      const res = await exhaustiveService.exhaustiveParams(params);
      if (res.errors.length) {
        throw new CompositeError(res.errors);
      } else if (!res.data) {
        throw new Error('Unexpected data error: Failed to get example');
      }
      return res;
    },
    select: (data) => data.data,
  });
};

export const exhaustiveParamsQueryOptions = (
  params: ExhaustiveParamsParams,
) => {
  const exhaustiveService = getExhaustiveService();
  return queryOptions({
    queryKey: ['exhaustive', 'exhaustiveParams', params || {}],
    queryFn: async () => {
      const res = await exhaustiveService.exhaustiveParams(params);
      if (res.errors.length) {
        throw new CompositeError(res.errors);
      } else if (!res.data) {
        throw new Error('Unexpected data error: Failed to get example');
      }
      return res;
    },
    select: (data) => data.data,
  });
};
