/**
 * This code was generated by @basketry/react-query@{{version}}
 *
 * Changes to this file may cause incorrect behavior and will be lost if
 * the code is regenerated.
 *
 * To make changes to the contents of this file:
 * 1. Edit source/path.ext
 * 2. Run the Basketry CLI
 *
 * About Basketry: https://github.com/basketry/basketry/wiki
 * About @basketry/react-query: https://github.com/basketry/react-query#readme
 */

import {
  mutationOptions,
  queryOptions,
  useMutation,
  useQuery,
  useQueryClient,
  useSuspenseQuery,
} from '@tanstack/react-query';
import type {
  CreateWidgetParams,
  DeleteWidgetFooParams,
  GetWidgetFooParams,
} from '../types';
import { getWidgetService } from './context';
import { CompositeError } from './runtime';

export const createWidgetMutationOptions = () => {
  const widgetService = getWidgetService();
  return mutationOptions({
    mutationFn: async (params?: CreateWidgetParams) => {
      const res = await widgetService.createWidget(params);
      if (res.errors.length) {
        throw new CompositeError(res.errors);
      } else if (!res.data) {
        throw new Error('Unexpected data error: Failed to get example');
      }
      return res.data;
    },
  });
};

/**
 * @deprecated This mutation hook is deprecated and will be removed in a future version.
 * Please use the new query options pattern instead:
 *
 * ```typescript
 * import { useMutation } from '@tanstack/react-query';
 * import { createWidgetMutationOptions } from './hooks/widgets';
 *
 * // Old pattern (deprecated)
 * const mutation = useCreateWidget();
 *
 * // New pattern
 * const mutation = useMutation(createWidgetMutationOptions());
 * ```
 */
export const useCreateWidget = () => {
  const queryClient = useQueryClient();
  const mutationOptions = createWidgetMutationOptions();
  return useMutation({
    ...mutationOptions,
    onSuccess: (data, variables, context) => {
      queryClient.invalidateQueries({ queryKey: ['widget'] });
      mutationOptions.onSuccess?.(data, variables, context);
    },
  });
};

export const deleteWidgetFooMutationOptions = () => {
  const widgetService = getWidgetService();
  return mutationOptions({
    mutationFn: async (params: DeleteWidgetFooParams) => {
      const res = await widgetService.deleteWidgetFoo(params);
      if (res.errors.length) {
        throw new CompositeError(res.errors);
      } else if (!res.data) {
        throw new Error('Unexpected data error: Failed to get example');
      }
      return res.data;
    },
  });
};

/**
 * @deprecated This mutation hook is deprecated and will be removed in a future version.
 * Please use the new query options pattern instead:
 *
 * ```typescript
 * import { useMutation } from '@tanstack/react-query';
 * import { deleteWidgetFooMutationOptions } from './hooks/widgets';
 *
 * // Old pattern (deprecated)
 * const mutation = useDeleteWidgetFoo();
 *
 * // New pattern
 * const mutation = useMutation(deleteWidgetFooMutationOptions());
 * ```
 */
export const useDeleteWidgetFoo = () => {
  const queryClient = useQueryClient();
  const mutationOptions = deleteWidgetFooMutationOptions();
  return useMutation({
    ...mutationOptions,
    onSuccess: (data, variables, context) => {
      queryClient.invalidateQueries({ queryKey: ['widget'] });
      mutationOptions.onSuccess?.(data, variables, context);
    },
  });
};

export const getWidgetFooQueryOptions = (params: GetWidgetFooParams) => {
  const widgetService = getWidgetService();
  return queryOptions({
    queryKey: ['widget', 'getWidgetFoo', params || {}] as const,
    queryFn: async () => {
      const res = await widgetService.getWidgetFoo(params);
      if (res.errors.length) {
        throw new CompositeError(res.errors);
      } else if (!res.data) {
        throw new Error('Unexpected data error: Failed to get example');
      }
      return res;
    },
  });
};

/**
 * @deprecated This hook is deprecated and will be removed in a future version.
 * Please use the new query options pattern instead:
 *
 * ```typescript
 * import { useQuery } from '@tanstack/react-query';
 * import { getWidgetFooQueryOptions } from './hooks/widgets';
 *
 * // Old pattern (deprecated)
 * const result = useGetWidgetFoo(params);
 *
 * // New pattern
 * const result = useQuery(getWidgetFooQueryOptions(params));
 * ```
 */
export const useGetWidgetFoo = (params: GetWidgetFooParams) => {
  return useQuery(getWidgetFooQueryOptions(params));
};

/**
 * @deprecated This hook is deprecated and will be removed in a future version.
 * Please use the new query options pattern instead:
 *
 * ```typescript
 * import { useSuspenseQuery } from '@tanstack/react-query';
 * import { getWidgetFooQueryOptions } from './hooks/widgets';
 *
 * // Old pattern (deprecated)
 * const result = useSuspenseGetWidgetFoo(params);
 *
 * // New pattern
 * const result = useSuspenseQuery(getWidgetFooQueryOptions(params));
 * ```
 */
export const useSuspenseGetWidgetFoo = (params: GetWidgetFooParams) => {
  return useSuspenseQuery(getWidgetFooQueryOptions(params));
};

export const getWidgetsQueryOptions = () => {
  const widgetService = getWidgetService();
  return queryOptions({
    queryKey: ['widget', 'getWidgets', {}] as const,
    queryFn: async () => {
      const res = await widgetService.getWidgets();
      if (res.errors.length) {
        throw new CompositeError(res.errors);
      } else if (!res.data) {
        throw new Error('Unexpected data error: Failed to get example');
      }
      return res;
    },
  });
};

/**
 * @deprecated This hook is deprecated and will be removed in a future version.
 * Please use the new query options pattern instead:
 *
 * ```typescript
 * import { useQuery } from '@tanstack/react-query';
 * import { getWidgetsQueryOptions } from './hooks/widgets';
 *
 * // Old pattern (deprecated)
 * const result = useGetWidgets(params);
 *
 * // New pattern
 * const result = useQuery(getWidgetsQueryOptions(params));
 * ```
 */
export const useGetWidgets = () => {
  return useQuery(getWidgetsQueryOptions());
};

/**
 * @deprecated This hook is deprecated and will be removed in a future version.
 * Please use the new query options pattern instead:
 *
 * ```typescript
 * import { useSuspenseQuery } from '@tanstack/react-query';
 * import { getWidgetsQueryOptions } from './hooks/widgets';
 *
 * // Old pattern (deprecated)
 * const result = useSuspenseGetWidgets(params);
 *
 * // New pattern
 * const result = useSuspenseQuery(getWidgetsQueryOptions(params));
 * ```
 */
export const useSuspenseGetWidgets = () => {
  return useSuspenseQuery(getWidgetsQueryOptions());
};

export const putWidgetMutationOptions = () => {
  const widgetService = getWidgetService();
  return mutationOptions({
    mutationFn: async () => {
      const res = await widgetService.putWidget();
      if (res.errors.length) {
        throw new CompositeError(res.errors);
      } else if (!res.data) {
        throw new Error('Unexpected data error: Failed to get example');
      }
      return res.data;
    },
  });
};

/**
 * @deprecated This mutation hook is deprecated and will be removed in a future version.
 * Please use the new query options pattern instead:
 *
 * ```typescript
 * import { useMutation } from '@tanstack/react-query';
 * import { putWidgetMutationOptions } from './hooks/widgets';
 *
 * // Old pattern (deprecated)
 * const mutation = usePutWidget();
 *
 * // New pattern
 * const mutation = useMutation(putWidgetMutationOptions());
 * ```
 */
export const usePutWidget = () => {
  const queryClient = useQueryClient();
  const mutationOptions = putWidgetMutationOptions();
  return useMutation({
    ...mutationOptions,
    onSuccess: (data, variables, context) => {
      queryClient.invalidateQueries({ queryKey: ['widget'] });
      mutationOptions.onSuccess?.(data, variables, context);
    },
  });
};
