/**
 * This code was generated by @basketry/react-query@{{version}}
 *
 * Changes to this file may cause incorrect behavior and will be lost if
 * the code is regenerated.
 *
 * To make changes to the contents of this file:
 * 1. Edit source/path.ext
 * 2. Run the Basketry CLI
 *
 * About Basketry: https://basketry.io
 * About @basketry/react-query: https://basketry.io/docs/components/@basketry/react-query
 */

import {
  mutationOptions,
  queryOptions,
  type UndefinedInitialDataOptions,
  useMutation,
  type UseMutationOptions,
  useQuery,
  useQueryClient,
  useSuspenseQuery,
} from '@tanstack/react-query';
import type {
  CreateWidgetParams,
  DeleteWidgetFooParams,
  Error,
  GetWidgetFooParams,
  Widget,
} from '../types';
import { getWidgetService, useWidgetService } from './context';
import { guard, type QueryError } from './runtime';

// Query and mutation options exports for React Query v5

export const getWidgetsQueryOptions = () => {
  const widgetService = getWidgetService();
  return queryOptions({
    queryKey: ['widget', 'getWidgets', {}],
    queryFn: async () => {
      const res = await guard(widgetService.getWidgets());
      if (res.errors.length) {
        const handled: QueryError<Error[]> = {
          kind: 'handled',
          payload: res.errors,
        };
        throw handled;
      }
      return res;
    },
  });
};

export const putWidgetMutationOptions = () => {
  const widgetService = getWidgetService();
  return mutationOptions({
    mutationFn: async () => {
      const res = await guard(widgetService.putWidget());
      if (res.errors.length) {
        const handled: QueryError<Error[]> = {
          kind: 'handled',
          payload: res.errors,
        };
        throw handled;
      }
      return res.data;
    },
  });
};

export const createWidgetMutationOptions = () => {
  const widgetService = getWidgetService();
  return mutationOptions({
    mutationFn: async (params: CreateWidgetParams) => {
      const res = await guard(widgetService.createWidget(params));
      if (res.errors.length) {
        const handled: QueryError<Error[]> = {
          kind: 'handled',
          payload: res.errors,
        };
        throw handled;
      }
      return res.data;
    },
  });
};

export const getWidgetFooQueryOptions = (params?: GetWidgetFooParams) => {
  const widgetService = getWidgetService();
  return queryOptions({
    queryKey: ['widget', 'getWidgetFoo', params || {}],
    queryFn: async () => {
      const res = await guard(widgetService.getWidgetFoo(params));
      if (res.errors.length) {
        const handled: QueryError<Error[]> = {
          kind: 'handled',
          payload: res.errors,
        };
        throw handled;
      }
      return res;
    },
  });
};

export const deleteWidgetFooMutationOptions = () => {
  const widgetService = getWidgetService();
  return mutationOptions({
    mutationFn: async (params: DeleteWidgetFooParams) => {
      const res = await guard(widgetService.deleteWidgetFoo(params));
      if (res.errors.length) {
        const handled: QueryError<Error[]> = {
          kind: 'handled',
          payload: res.errors,
        };
        throw handled;
      }
      return res.data;
    },
  });
};

// Legacy hooks - deprecated, use query/mutation options exports instead

/** @deprecated Use createWidgetMutationOptions with useMutation instead */
export function useCreateWidget(
  options?: Omit<
    UseMutationOptions<void, QueryError<Error[]>, CreateWidgetParams>,
    'mutationFn'
  >,
) {
  const queryClient = useQueryClient();
  const widgetService = useWidgetService();
  return useMutation({
    mutationFn: async (params?: CreateWidgetParams) => {
      const res = await guard(widgetService.createWidget(params));
      if (res.errors.length) {
        const handled: QueryError<Error[]> = {
          kind: 'handled',
          payload: res.errors,
        };
        throw handled;
      }
      queryClient.invalidateQueries({ queryKey: ['widget'] });
      return res.data;
    },
    ...options,
  });
}

/** @deprecated Use deleteWidgetFooMutationOptions with useMutation instead */
export function useDeleteWidgetFoo(
  options?: Omit<
    UseMutationOptions<void, QueryError<Error[]>, DeleteWidgetFooParams>,
    'mutationFn'
  >,
) {
  const queryClient = useQueryClient();
  const widgetService = useWidgetService();
  return useMutation({
    mutationFn: async (params?: DeleteWidgetFooParams) => {
      const res = await guard(widgetService.deleteWidgetFoo(params));
      if (res.errors.length) {
        const handled: QueryError<Error[]> = {
          kind: 'handled',
          payload: res.errors,
        };
        throw handled;
      }
      queryClient.invalidateQueries({ queryKey: ['widget'] });
      return res.data;
    },
    ...options,
  });
}

/** @deprecated Use putWidgetMutationOptions with useMutation instead */
export function usePutWidget(
  options?: Omit<UseMutationOptions<void, QueryError<Error[]>>, 'mutationFn'>,
) {
  const queryClient = useQueryClient();
  const widgetService = useWidgetService();
  return useMutation({
    mutationFn: async () => {
      const res = await guard(widgetService.putWidget());
      if (res.errors.length) {
        const handled: QueryError<Error[]> = {
          kind: 'handled',
          payload: res.errors,
        };
        throw handled;
      }
      queryClient.invalidateQueries({ queryKey: ['widget'] });
      return res.data;
    },
    ...options,
  });
}

/** @deprecated Use getWidgetFooQueryOptions with useQuery instead */
export function useWidgetFoo(
  params?: GetWidgetFooParams,
  options?: Omit<
    UndefinedInitialDataOptions<Widget, QueryError<Error[]>>,
    'queryKey' | 'queryFn' | 'select'
  >,
) {
  const defaultOptions = getWidgetFooQueryOptions(params);
  return useQuery({ ...defaultOptions, ...options });
}

/** @deprecated Use getWidgetFooQueryOptions with useSuspenseQuery instead */
export function useSuspenseWidgetFoo(
  params?: GetWidgetFooParams,
  options?: Omit<
    UndefinedInitialDataOptions<Widget, QueryError<Error[]>>,
    'queryKey' | 'queryFn' | 'select'
  >,
) {
  const defaultOptions = getWidgetFooQueryOptions(params);
  return useSuspenseQuery({ ...defaultOptions, ...options });
}

/** @deprecated Use getWidgetsQueryOptions with useQuery instead */
export function useWidgets(
  options?: Omit<
    UndefinedInitialDataOptions<Widget, QueryError<Error[]>>,
    'queryKey' | 'queryFn' | 'select'
  >,
) {
  const defaultOptions = getWidgetsQueryOptions();
  return useQuery({ ...defaultOptions, ...options });
}

/** @deprecated Use getWidgetsQueryOptions with useSuspenseQuery instead */
export function useSuspenseWidgets(
  options?: Omit<
    UndefinedInitialDataOptions<Widget, QueryError<Error[]>>,
    'queryKey' | 'queryFn' | 'select'
  >,
) {
  const defaultOptions = getWidgetsQueryOptions();
  return useSuspenseQuery({ ...defaultOptions, ...options });
}
