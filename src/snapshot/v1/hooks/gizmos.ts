/**
 * This code was generated by @basketry/react-query@{{version}}
 *
 * Changes to this file may cause incorrect behavior and will be lost if
 * the code is regenerated.
 *
 * To make changes to the contents of this file:
 * 1. Edit source/path.ext
 * 2. Run the Basketry CLI
 *
 * About Basketry: https://basketry.io
 * About @basketry/react-query: https://basketry.io/docs/components/@basketry/react-query
 */

import {
  mutationOptions,
  queryOptions,
  type UndefinedInitialDataOptions,
  useMutation,
  type UseMutationOptions,
  useQuery,
  useQueryClient,
  useSuspenseQuery,
} from '@tanstack/react-query';
import type {
  CreateGizmoParams,
  Error,
  GetGizmosParams,
  GetGizmosResponse,
  UpdateGizmoParams,
} from '../types';
import {
  type BasketryExampleServiceConfig,
  getGizmoService,
  useGizmoService,
} from './context';
import { guard, type QueryError } from './runtime';

// Query and mutation options exports for React Query v5

/**
 * Only has a summary
 *
 * @deprecated
 */
export const getGizmosQueryOptions = (
  params?: GetGizmosParams,
  config?: BasketryExampleServiceConfig,
) => {
  const gizmoService = getGizmoService(config);
  return queryOptions<GetGizmosResponse, QueryError<Error[]>, void>({
    queryKey: ['gizmo', 'getGizmos', params || {}],
    queryFn: async () => {
      const res = await guard(gizmoService.getGizmos(params));
      if (res.errors.length) {
        const handled: QueryError<Error[]> = {
          kind: 'handled',
          payload: res.errors,
        };
        throw handled;
      }
      return res;
    },
    select: (data) => data.data,
  });
};

export const updateGizmoMutationOptions = (
  config?: BasketryExampleServiceConfig,
) => {
  const gizmoService = getGizmoService(config);
  return mutationOptions({
    mutationFn: async (params: UpdateGizmoParams) => {
      const res = await guard(gizmoService.updateGizmo(params));
      if (res.errors.length) {
        const handled: QueryError<Error[]> = {
          kind: 'handled',
          payload: res.errors,
        };
        throw handled;
      }
      return res.data;
    },
  });
};

/**
 * Has a summary in addition to a description
 *
 * Has a description in addition to a summary
 */
export const createGizmoMutationOptions = (
  config?: BasketryExampleServiceConfig,
) => {
  const gizmoService = getGizmoService(config);
  return mutationOptions({
    mutationFn: async (params: CreateGizmoParams) => {
      const res = await guard(gizmoService.createGizmo(params));
      if (res.errors.length) {
        const handled: QueryError<Error[]> = {
          kind: 'handled',
          payload: res.errors,
        };
        throw handled;
      }
      return res.data;
    },
  });
};

// Legacy hooks - deprecated, use query/mutation options exports instead

/**
 * Has a summary in addition to a description
 *
 * Has a description in addition to a summary
 */
/** @deprecated Use createGizmoMutationOptions with useMutation instead */
export function useCreateGizmo(
  options?: Omit<
    UseMutationOptions<void, QueryError<Error[]>, CreateGizmoParams>,
    'mutationFn'
  >,
) {
  const queryClient = useQueryClient();
  const gizmoService = useGizmoService();
  return useMutation({
    mutationFn: async (params?: CreateGizmoParams) => {
      const res = await guard(gizmoService.createGizmo(params));
      if (res.errors.length) {
        const handled: QueryError<Error[]> = {
          kind: 'handled',
          payload: res.errors,
        };
        throw handled;
      }
      queryClient.invalidateQueries({ queryKey: ['gizmo'] });
      return res.data;
    },
    ...options,
  });
}

/**
 * Only has a summary
 *
 * @deprecated
 */
/** @deprecated Use getGizmosQueryOptions with useQuery instead */
export function useGizmos(
  params?: GetGizmosParams,
  options?: Omit<
    UndefinedInitialDataOptions<GetGizmosResponse, QueryError<Error[]>, void>,
    'queryKey' | 'queryFn' | 'select'
  >,
) {
  const defaultOptions = getGizmosQueryOptions(params);
  return useQuery({ ...defaultOptions, ...options });
}

/**
 * Only has a summary
 *
 * @deprecated
 */
/** @deprecated Use getGizmosQueryOptions with useSuspenseQuery instead */
export function useSuspenseGizmos(
  params?: GetGizmosParams,
  options?: Omit<
    UndefinedInitialDataOptions<GetGizmosResponse, QueryError<Error[]>, void>,
    'queryKey' | 'queryFn' | 'select'
  >,
) {
  const defaultOptions = getGizmosQueryOptions(params);
  return useSuspenseQuery({ ...defaultOptions, ...options });
}

/** @deprecated Use updateGizmoMutationOptions with useMutation instead */
export function useUpdateGizmo(
  options?: Omit<
    UseMutationOptions<void, QueryError<Error[]>, UpdateGizmoParams>,
    'mutationFn'
  >,
) {
  const queryClient = useQueryClient();
  const gizmoService = useGizmoService();
  return useMutation({
    mutationFn: async (params?: UpdateGizmoParams) => {
      const res = await guard(gizmoService.updateGizmo(params));
      if (res.errors.length) {
        const handled: QueryError<Error[]> = {
          kind: 'handled',
          payload: res.errors,
        };
        throw handled;
      }
      queryClient.invalidateQueries({ queryKey: ['gizmo'] });
      return res.data;
    },
    ...options,
  });
}
