/**
 * This code was generated by @basketry/react-query@{{version}}
 *
 * Changes to this file may cause incorrect behavior and will be lost if
 * the code is regenerated.
 *
 * To make changes to the contents of this file:
 * 1. Edit source/path.ext
 * 2. Run the Basketry CLI
 *
 * About Basketry: https://github.com/basketry/basketry/wiki
 * About @basketry/react-query: https://github.com/basketry/react-query#readme
 */

import {
  mutationOptions,
  queryOptions,
  type UndefinedInitialDataOptions,
  useMutation,
  type UseMutationOptions,
  useQuery,
  useQueryClient,
  useSuspenseQuery,
} from '@tanstack/react-query';
import type {
  CreateGizmoParams,
  GetGizmosParams,
  Gizmo,
  GizmosResponse,
  UpdateGizmoParams,
  UploadGizmoParams,
} from '../types';
import { getGizmoService, useGizmoService } from './context';
import { compact, CompositeError } from './runtime';

/**
 * @deprecated This hook is deprecated and will be removed in a future version.
 * Please use the new query options pattern instead:
 *
 * ```typescript
 * import { useMutation } from '@tanstack/react-query';
 * import { createGizmoMutationOptions } from './hooks/gizmo';
 *
 * const mutation = useMutation(createGizmoMutationOptions());
 * ```
 */

/**
 * Has a summary in addition to a description
 * Has a description in addition to a summary
 */
export function useCreateGizmo(
  options?: Omit<
    UseMutationOptions<void, Error, CreateGizmoParams, unknown>,
    'mutationFn'
  >,
) {
  const queryClient = useQueryClient();
  const gizmoService = useGizmoService();
  return useMutation({
    mutationFn: async (params?: CreateGizmoParams) => {
      const res = await gizmoService.createGizmo(params);
      if (res.errors.length) {
        throw new CompositeError(res.errors);
      } else if (!res.data) {
        throw new Error('Unexpected data error: Failed to get example');
      }
      queryClient.invalidateQueries({ queryKey: [`/gizmos`] });
      return res.data;
    },
    ...options,
  });
}

/**
 * @deprecated This hook is deprecated and will be removed in a future version.
 * Please use the new query options pattern instead:
 *
 * ```typescript
 * import { useQuery } from '@tanstack/react-query';
 * import { getGizmosQueryOptions } from './hooks/gizmo';
 *
 * const result = useQuery(getGizmosQueryOptions(params));
 * ```
 */

/**
 * Only has a summary
 * @deprecated
 */
export function useGizmos(
  params?: GetGizmosParams,
  options?: Omit<
    UndefinedInitialDataOptions<
      GizmosResponse,
      Error,
      Gizmo | undefined,
      (string | Record<string, string | number | boolean>)[]
    >,
    'queryKey' | 'queryFn' | 'select'
  >,
) {
  const defaultOptions = useGetGizmosQueryOptions(params);
  return useQuery({ ...defaultOptions, ...options });
}

/**
 * @deprecated This hook is deprecated and will be removed in a future version.
 * Please use the new query options pattern instead:
 *
 * ```typescript
 * import { useSuspenseQuery } from '@tanstack/react-query';
 * import { getGizmosQueryOptions } from './hooks/gizmo';
 *
 * const result = useSuspenseQuery(getGizmosQueryOptions(params));
 * ```
 */

/**
 * Only has a summary
 * @deprecated
 */
export function useSuspenseGizmos(
  params?: GetGizmosParams,
  options?: Omit<
    UndefinedInitialDataOptions<
      GizmosResponse,
      Error,
      Gizmo | undefined,
      (string | Record<string, string | number | boolean>)[]
    >,
    'queryKey' | 'queryFn' | 'select'
  >,
) {
  const defaultOptions = useGetGizmosQueryOptions(params);
  return useSuspenseQuery({ ...defaultOptions, ...options });
}

/**
 * @deprecated This hook is deprecated and will be removed in a future version.
 * Please use the new query options pattern instead:
 *
 * ```typescript
 * import { useMutation } from '@tanstack/react-query';
 * import { updateGizmoMutationOptions } from './hooks/gizmo';
 *
 * const mutation = useMutation(updateGizmoMutationOptions());
 * ```
 */
export function useUpdateGizmo(
  options?: Omit<
    UseMutationOptions<void, Error, UpdateGizmoParams, unknown>,
    'mutationFn'
  >,
) {
  const queryClient = useQueryClient();
  const gizmoService = useGizmoService();
  return useMutation({
    mutationFn: async (params?: UpdateGizmoParams) => {
      const res = await gizmoService.updateGizmo(params);
      if (res.errors.length) {
        throw new CompositeError(res.errors);
      } else if (!res.data) {
        throw new Error('Unexpected data error: Failed to get example');
      }
      queryClient.invalidateQueries({ queryKey: [`/gizmos`] });
      return res.data;
    },
    ...options,
  });
}

/**
 * @deprecated This hook is deprecated and will be removed in a future version.
 * Please use the new query options pattern instead:
 *
 * ```typescript
 * import { useMutation } from '@tanstack/react-query';
 * import { uploadGizmoMutationOptions } from './hooks/gizmo';
 *
 * const mutation = useMutation(uploadGizmoMutationOptions());
 * ```
 */
export function useUploadGizmo(
  options?: Omit<
    UseMutationOptions<void, Error, UploadGizmoParams, unknown>,
    'mutationFn'
  >,
) {
  const queryClient = useQueryClient();
  const gizmoService = useGizmoService();
  return useMutation({
    mutationFn: async (params: UploadGizmoParams) => {
      const res = await gizmoService.uploadGizmo(params);
      if (res.errors.length) {
        throw new CompositeError(res.errors);
      } else if (!res.data) {
        throw new Error('Unexpected data error: Failed to get example');
      }
      queryClient.invalidateQueries({ queryKey: [`/gizmos/data`] });
      return res.data;
    },
    ...options,
  });
}

const useGetGizmosQueryOptions = (params?: GetGizmosParams) => {
  const gizmoService = useGizmoService();
  return queryOptions({
    queryKey: [`/gizmos`, compact({ search: params?.search })].filter(Boolean),
    queryFn: async () => {
      const res = await gizmoService.getGizmos(params);
      if (res.errors.length) {
        throw new CompositeError(res.errors);
      } else if (!res.data) {
        throw new Error('Unexpected data error: Failed to get example');
      }
      return res;
    },
    select: (data) => data.data,
  });
};

/**
 * Only has a summary
 * @deprecated
 */
export const getGizmosQueryOptions = (params?: GetGizmosParams) => {
  const gizmoService = getGizmoService();
  return queryOptions({
    queryKey: [`/gizmos`, compact({ search: params?.search })].filter(Boolean),
    queryFn: async () => {
      const res = await gizmoService.getGizmos(params);
      if (res.errors.length) {
        throw new CompositeError(res.errors);
      } else if (!res.data) {
        throw new Error('Unexpected data error: Failed to get example');
      }
      return res;
    },
    select: (data) => data.data,
  });
};

/**
 * Has a summary in addition to a description
 * Has a description in addition to a summary
 */
export const createGizmoMutationOptions = () => {
  const gizmoService = getGizmoService();
  return mutationOptions({
    mutationFn: async (params: CreateGizmoParams) => {
      const res = await gizmoService.createGizmo(params);
      if (res.errors.length) {
        throw new CompositeError(res.errors);
      } else if (!res.data) {
        throw new Error('Unexpected data error: Failed to get example');
      }
      return res.data;
    },
  });
};
export const updateGizmoMutationOptions = () => {
  const gizmoService = getGizmoService();
  return mutationOptions({
    mutationFn: async (params: UpdateGizmoParams) => {
      const res = await gizmoService.updateGizmo(params);
      if (res.errors.length) {
        throw new CompositeError(res.errors);
      } else if (!res.data) {
        throw new Error('Unexpected data error: Failed to get example');
      }
      return res.data;
    },
  });
};
export const uploadGizmoMutationOptions = () => {
  const gizmoService = getGizmoService();
  return mutationOptions({
    mutationFn: async (params: UploadGizmoParams) => {
      const res = await gizmoService.uploadGizmo(params);
      if (res.errors.length) {
        throw new CompositeError(res.errors);
      } else if (!res.data) {
        throw new Error('Unexpected data error: Failed to get example');
      }
      return res.data;
    },
  });
};
