/**
 * This code was generated by @basketry/react-query@{{version}}
 *
 * Changes to this file may cause incorrect behavior and will be lost if
 * the code is regenerated.
 *
 * To make changes to the contents of this file:
 * 1. Edit source/path.ext
 * 2. Run the Basketry CLI
 *
 * About Basketry: https://github.com/basketry/basketry/wiki
 * About @basketry/react-query: https://github.com/basketry/react-query#readme
 */

import {
  mutationOptions,
  queryOptions,
  type UndefinedInitialDataOptions,
  useMutation,
  type UseMutationOptions,
  useQuery,
  useQueryClient,
  useSuspenseQuery,
} from '@tanstack/react-query';
import type { ComboAuthSchemesParams } from '../types';
import {
  getAuthPermutationService,
  useAuthPermutationService,
} from './context';
import { CompositeError } from './runtime';

/**
 * @deprecated
 */
export function useAllAuthSchemes(
  options?: Omit<
    UndefinedInitialDataOptions<void, Error, void | undefined, string[]>,
    'queryKey' | 'queryFn' | 'select'
  >,
) {
  const defaultOptions = useAllAuthSchemesQueryOptions();
  return useQuery({ ...defaultOptions, ...options });
}

/**
 * @deprecated
 */
export function useSuspenseAllAuthSchemes(
  options?: Omit<
    UndefinedInitialDataOptions<void, Error, void | undefined, string[]>,
    'queryKey' | 'queryFn' | 'select'
  >,
) {
  const defaultOptions = useAllAuthSchemesQueryOptions();
  return useSuspenseQuery({ ...defaultOptions, ...options });
}

/**
 * @deprecated
 */
export function useComboAuthSchemes(
  options?: Omit<
    UseMutationOptions<void, Error, ComboAuthSchemesParams, unknown>,
    'mutationFn'
  >,
) {
  const queryClient = useQueryClient();
  const authPermutationService = useAuthPermutationService();
  return useMutation({
    mutationFn: async () => {
      const res = await authPermutationService.comboAuthSchemes();
      if (res.errors.length) {
        throw new CompositeError(res.errors);
      } else if (!res.data) {
        throw new Error('Unexpected data error: Failed to get example');
      }
      queryClient.invalidateQueries({ queryKey: ['authPermutation'] });
      return res.data;
    },
    ...options,
  });
}

const useAllAuthSchemesQueryOptions = () => {
  const authPermutationService = useAuthPermutationService();
  return queryOptions({
    queryKey: ['authPermutation', 'allAuthSchemes', {}],
    queryFn: async () => {
      const res = await authPermutationService.allAuthSchemes();
      if (res.errors.length) {
        throw new CompositeError(res.errors);
      } else if (!res.data) {
        throw new Error('Unexpected data error: Failed to get example');
      }
      return res;
    },
    select: (data) => data.data,
  });
};

export const allAuthSchemesQueryOptions = () => {
  const authPermutationService = getAuthPermutationService();
  return queryOptions({
    queryKey: ['authPermutation', 'allAuthSchemes', {}],
    queryFn: async () => {
      const res = await authPermutationService.allAuthSchemes();
      if (res.errors.length) {
        throw new CompositeError(res.errors);
      } else if (!res.data) {
        throw new Error('Unexpected data error: Failed to get example');
      }
      return res;
    },
    select: (data) => data.data,
  });
};
export const comboAuthSchemesMutationOptions = () => {
  const authPermutationService = getAuthPermutationService();
  return mutationOptions({
    mutationFn: async () => {
      const res = await authPermutationService.comboAuthSchemes();
      if (res.errors.length) {
        throw new CompositeError(res.errors);
      } else if (!res.data) {
        throw new Error('Unexpected data error: Failed to get example');
      }
      return res.data;
    },
  });
};
