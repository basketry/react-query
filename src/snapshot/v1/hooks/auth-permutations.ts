/**
 * This code was generated by @basketry/react-query@{{version}}
 *
 * Changes to this file may cause incorrect behavior and will be lost if
 * the code is regenerated.
 *
 * To make changes to the contents of this file:
 * 1. Edit source/path.ext
 * 2. Run the Basketry CLI
 *
 * About Basketry: https://github.com/basketry/basketry/wiki
 * About @basketry/react-query: https://github.com/basketry/react-query#readme
 */

import {
  mutationOptions,
  queryOptions,
  useMutation,
  useQuery,
  useQueryClient,
  useSuspenseQuery,
} from '@tanstack/react-query';
import { getAuthPermutationService } from './context';
import { CompositeError } from './runtime';

export const allAuthSchemesQueryOptions = () => {
  const authPermutationService = getAuthPermutationService();
  return queryOptions({
    queryKey: ['authPermutation', 'all-auth-schemes', {}] as const,
    queryFn: async () => {
      const res = await authPermutationService.allAuthSchemes();
      if (res.errors.length) {
        throw new CompositeError(res.errors);
      } else if (!res.data) {
        throw new Error('Unexpected data error: Failed to get example');
      }
      return res;
    },
    select: (data) => data.data,
  });
};

/**
 * @deprecated This hook is deprecated and will be removed in a future version.
 * Please use the new query options pattern instead:
 *
 * ```typescript
 * import { useQuery } from '@tanstack/react-query';
 * import { all-auth-schemesQueryOptions } from './hooks/authPermutations';
 *
 * // Old pattern (deprecated)
 * const result = useAllAuthSchemes(params);
 *
 * // New pattern
 * const result = useQuery(all-auth-schemesQueryOptions(params));
 * ```
 */
export const useAllAuthSchemes = () => {
  return useQuery(allAuthSchemesQueryOptions());
};

/**
 * @deprecated This hook is deprecated and will be removed in a future version.
 * Please use the new query options pattern instead:
 *
 * ```typescript
 * import { useSuspenseQuery } from '@tanstack/react-query';
 * import { all-auth-schemesQueryOptions } from './hooks/authPermutations';
 *
 * // Old pattern (deprecated)
 * const result = useSuspenseAllAuthSchemes(params);
 *
 * // New pattern
 * const result = useSuspenseQuery(all-auth-schemesQueryOptions(params));
 * ```
 */
export const useSuspenseAllAuthSchemes = () => {
  return useSuspenseQuery(allAuthSchemesQueryOptions());
};

export const comboAuthSchemesMutationOptions = () => {
  const authPermutationService = getAuthPermutationService();
  return mutationOptions({
    mutationFn: async () => {
      const res = await authPermutationService.comboAuthSchemes();
      if (res.errors.length) {
        throw new CompositeError(res.errors);
      } else if (!res.data) {
        throw new Error('Unexpected data error: Failed to get example');
      }
      return res.data;
    },
  });
};

/**
 * @deprecated This mutation hook is deprecated and will be removed in a future version.
 * Please use the new query options pattern instead:
 *
 * ```typescript
 * import { useMutation } from '@tanstack/react-query';
 * import { combo-auth-schemesMutationOptions } from './hooks/authPermutations';
 *
 * // Old pattern (deprecated)
 * const mutation = useComboAuthSchemes();
 *
 * // New pattern
 * const mutation = useMutation(combo-auth-schemesMutationOptions());
 * ```
 */
export const useComboAuthSchemes = () => {
  const queryClient = useQueryClient();
  const mutationOptions = comboAuthSchemesMutationOptions();
  return useMutation({
    ...mutationOptions,
    onSuccess: (data, variables, context) => {
      queryClient.invalidateQueries({ queryKey: ['authPermutation'] });
      mutationOptions.onSuccess?.(data, variables, context);
    },
  });
};
