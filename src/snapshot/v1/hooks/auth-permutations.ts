/**
 * This code was generated by @basketry/react-query@{{version}}
 *
 * Changes to this file may cause incorrect behavior and will be lost if
 * the code is regenerated.
 *
 * To make changes to the contents of this file:
 * 1. Edit source/path.ext
 * 2. Run the Basketry CLI
 *
 * About Basketry: https://basketry.io
 * About @basketry/react-query: https://basketry.io/docs/components/@basketry/react-query
 */

import {
  mutationOptions,
  queryOptions,
  type UndefinedInitialDataOptions,
  useMutation,
  type UseMutationOptions,
  useQuery,
  useQueryClient,
  useSuspenseQuery,
} from '@tanstack/react-query';
import type { Error } from '../types';
import {
  type BasketryExampleServiceConfig,
  getAuthPermutationService,
  useAuthPermutationService,
} from './context';
import { guard, type QueryError } from './runtime';

// Query and mutation options exports for React Query v5

export const allAuthSchemesQueryOptions = (
  config?: BasketryExampleServiceConfig,
) => {
  const authPermutationService = getAuthPermutationService(config);
  return queryOptions<void, QueryError<Error[]>, void>({
    queryKey: ['authPermutation', 'allAuthSchemes', {}],
    queryFn: async () => {
      const res = await guard(authPermutationService.allAuthSchemes());
      if (res.errors.length) {
        const handled: QueryError<Error[]> = {
          kind: 'handled',
          payload: res.errors,
        };
        throw handled;
      }
      return res;
    },
    select: (data) => data.data,
  });
};

export const comboAuthSchemesMutationOptions = (
  config?: BasketryExampleServiceConfig,
) => {
  const authPermutationService = getAuthPermutationService(config);
  return mutationOptions({
    mutationFn: async () => {
      const res = await guard(authPermutationService.comboAuthSchemes());
      if (res.errors.length) {
        const handled: QueryError<Error[]> = {
          kind: 'handled',
          payload: res.errors,
        };
        throw handled;
      }
      return res.data;
    },
  });
};

// Legacy hooks - deprecated, use query/mutation options exports instead

/** @deprecated Use allAuthSchemesQueryOptions with useQuery instead */
export function useAllAuthSchemes(
  options?: Omit<
    UndefinedInitialDataOptions<void, QueryError<Error[]>, void>,
    'queryKey' | 'queryFn' | 'select'
  >,
) {
  const defaultOptions = allAuthSchemesQueryOptions();
  return useQuery({ ...defaultOptions, ...options });
}

/** @deprecated Use allAuthSchemesQueryOptions with useSuspenseQuery instead */
export function useSuspenseAllAuthSchemes(
  options?: Omit<
    UndefinedInitialDataOptions<void, QueryError<Error[]>, void>,
    'queryKey' | 'queryFn' | 'select'
  >,
) {
  const defaultOptions = allAuthSchemesQueryOptions();
  return useSuspenseQuery({ ...defaultOptions, ...options });
}

/** @deprecated Use comboAuthSchemesMutationOptions with useMutation instead */
export function useComboAuthSchemes(
  options?: Omit<UseMutationOptions<void, QueryError<Error[]>>, 'mutationFn'>,
) {
  const queryClient = useQueryClient();
  const authPermutationService = useAuthPermutationService();
  return useMutation({
    mutationFn: async () => {
      const res = await guard(authPermutationService.comboAuthSchemes());
      if (res.errors.length) {
        const handled: QueryError<Error[]> = {
          kind: 'handled',
          payload: res.errors,
        };
        throw handled;
      }
      queryClient.invalidateQueries({ queryKey: ['authPermutation'] });
      return res.data;
    },
    ...options,
  });
}
