/**
 * This code was generated by @basketry/react-query@{{version}}
 *
 * Changes to this file may cause incorrect behavior and will be lost if
 * the code is regenerated.
 *
 * To make changes to the contents of this file:
 * 1. Edit source/path.ext
 * 2. Run the Basketry CLI
 *
 * About Basketry: https://basketry.io
 * About @basketry/react-query: https://basketry.io/docs/components/@basketry/react-query
 */

import {
  createContext,
  type FC,
  type PropsWithChildren,
  useContext,
  useMemo,
} from 'react';
import {
  type BasketryExampleOptions,
  type FetchLike,
  HttpAuthPermutationService,
  HttpExhaustiveService,
  HttpGizmoService,
  HttpWidgetService,
} from '../http-client';
import type {
  AuthPermutationService,
  ExhaustiveService,
  GizmoService,
  WidgetService,
} from '../types';

export interface BasketryExampleContextProps extends BasketryExampleOptions {
  fetch?: FetchLike;
}
export type BasketryExampleServiceConfig = BasketryExampleContextProps;
const BasketryExampleContext = createContext<
  BasketryExampleContextProps | undefined
>(undefined);

let currentContext: BasketryExampleContextProps | undefined;

// SSR-safe getter for current context
export const getCurrentContext = ():
  | BasketryExampleContextProps
  | undefined => {
  if (typeof window === 'undefined' && !currentContext) {
    // SSR/RSC: No context available unless explicitly set
    return undefined;
  }
  return currentContext;
};

export const BasketryExampleProvider: FC<
  PropsWithChildren<BasketryExampleContextProps>
> = ({ children, ...props }) => {
  const value = useMemo(
    () => ({ ...props }),
    [
      props.fetch,
      props.mapUnhandledException,
      props.mapValidationError,
      props.root,
    ],
  );
  currentContext = value;
  return (
    <BasketryExampleContext.Provider value={value}>
      {children}
    </BasketryExampleContext.Provider>
  );
};

export const getAuthPermutationService = (
  config?: BasketryExampleContextProps,
) => {
  const serviceConfig = config ?? getCurrentContext();
  if (!serviceConfig) {
    throw new Error(
      'getAuthPermutationService: Configuration required. Either pass config parameter or wrap component in BasketryExampleProvider.',
    );
  }
  const authPermutationService: AuthPermutationService =
    new HttpAuthPermutationService(
      serviceConfig.fetch ??
        (typeof window !== 'undefined'
          ? window.fetch.bind(window)
          : globalThis.fetch),
      serviceConfig,
    );
  return authPermutationService;
};

export const useAuthPermutationService = () => {
  const context = useContext(BasketryExampleContext);
  if (!context) {
    throw new Error(
      'useAuthPermutationService must be used within a BasketryExampleProvider',
    );
  }
  const authPermutationService: AuthPermutationService =
    new HttpAuthPermutationService(
      context.fetch ?? window.fetch.bind(window),
      context,
    );
  return authPermutationService;
};

export const getExhaustiveService = (config?: BasketryExampleContextProps) => {
  const serviceConfig = config ?? getCurrentContext();
  if (!serviceConfig) {
    throw new Error(
      'getExhaustiveService: Configuration required. Either pass config parameter or wrap component in BasketryExampleProvider.',
    );
  }
  const exhaustiveService: ExhaustiveService = new HttpExhaustiveService(
    serviceConfig.fetch ??
      (typeof window !== 'undefined'
        ? window.fetch.bind(window)
        : globalThis.fetch),
    serviceConfig,
  );
  return exhaustiveService;
};

export const useExhaustiveService = () => {
  const context = useContext(BasketryExampleContext);
  if (!context) {
    throw new Error(
      'useExhaustiveService must be used within a BasketryExampleProvider',
    );
  }
  const exhaustiveService: ExhaustiveService = new HttpExhaustiveService(
    context.fetch ?? window.fetch.bind(window),
    context,
  );
  return exhaustiveService;
};

export const getGizmoService = (config?: BasketryExampleContextProps) => {
  const serviceConfig = config ?? getCurrentContext();
  if (!serviceConfig) {
    throw new Error(
      'getGizmoService: Configuration required. Either pass config parameter or wrap component in BasketryExampleProvider.',
    );
  }
  const gizmoService: GizmoService = new HttpGizmoService(
    serviceConfig.fetch ??
      (typeof window !== 'undefined'
        ? window.fetch.bind(window)
        : globalThis.fetch),
    serviceConfig,
  );
  return gizmoService;
};

export const useGizmoService = () => {
  const context = useContext(BasketryExampleContext);
  if (!context) {
    throw new Error(
      'useGizmoService must be used within a BasketryExampleProvider',
    );
  }
  const gizmoService: GizmoService = new HttpGizmoService(
    context.fetch ?? window.fetch.bind(window),
    context,
  );
  return gizmoService;
};

export const getWidgetService = (config?: BasketryExampleContextProps) => {
  const serviceConfig = config ?? getCurrentContext();
  if (!serviceConfig) {
    throw new Error(
      'getWidgetService: Configuration required. Either pass config parameter or wrap component in BasketryExampleProvider.',
    );
  }
  const widgetService: WidgetService = new HttpWidgetService(
    serviceConfig.fetch ??
      (typeof window !== 'undefined'
        ? window.fetch.bind(window)
        : globalThis.fetch),
    serviceConfig,
  );
  return widgetService;
};

export const useWidgetService = () => {
  const context = useContext(BasketryExampleContext);
  if (!context) {
    throw new Error(
      'useWidgetService must be used within a BasketryExampleProvider',
    );
  }
  const widgetService: WidgetService = new HttpWidgetService(
    context.fetch ?? window.fetch.bind(window),
    context,
  );
  return widgetService;
};
