/**
 * This code was generated by @basketry/react-query@{{version}}
 *
 * Changes to this file may cause incorrect behavior and will be lost if
 * the code is regenerated.
 *
 * To make changes to the contents of this file:
 * 1. Edit source/path.ext
 * 2. Run the Basketry CLI
 *
 * About Basketry: https://github.com/basketry/basketry/wiki
 * About @basketry/react-query: https://github.com/basketry/react-query#readme
 */

import {
  createContext,
  type FC,
  type PropsWithChildren,
  useContext,
  useMemo,
} from 'react';
import {
  type BasketryExampleOptions,
  type FetchLike,
  HttpAuthPermutationService,
  HttpExhaustiveService,
  HttpGizmoService,
  HttpWidgetService,
} from '../http-client';
import type {
  AuthPermutationService,
  ExhaustiveService,
  GizmoService,
  WidgetService,
} from '../types';

export interface ClientContextProps {
  fetch: FetchLike;
  options: BasketryExampleOptions;
}
const ClientContext = createContext<ClientContextProps | undefined>(undefined);

let currentContext: ClientContextProps | undefined;

export const ClientProvider: FC<PropsWithChildren<ClientContextProps>> = ({
  children,
  fetch,
  options,
}) => {
  const value = useMemo(
    () => ({ fetch, options }),
    [
      fetch,
      options.mapUnhandledException,
      options.mapValidationError,
      options.root,
    ],
  );
  currentContext = value;
  return (
    <ClientContext.Provider value={value}>{children}</ClientContext.Provider>
  );
};

export const getGizmoService = () => {
  if (!currentContext) {
    throw new Error('getGizmoService called outside of ClientProvider');
  }
  const gizmoService: GizmoService = new HttpGizmoService(
    currentContext.fetch,
    currentContext.options,
  );
  return gizmoService;
};

export const useGizmoService = () => {
  const context = useContext(ClientContext);
  if (!context) {
    throw new Error('useGizmoService must be used within a ClientProvider');
  }
  const gizmoService: GizmoService = new HttpGizmoService(
    context.fetch,
    context.options,
  );
  return gizmoService;
};

export const getWidgetService = () => {
  if (!currentContext) {
    throw new Error('getWidgetService called outside of ClientProvider');
  }
  const widgetService: WidgetService = new HttpWidgetService(
    currentContext.fetch,
    currentContext.options,
  );
  return widgetService;
};

export const useWidgetService = () => {
  const context = useContext(ClientContext);
  if (!context) {
    throw new Error('useWidgetService must be used within a ClientProvider');
  }
  const widgetService: WidgetService = new HttpWidgetService(
    context.fetch,
    context.options,
  );
  return widgetService;
};

export const getExhaustiveService = () => {
  if (!currentContext) {
    throw new Error('getExhaustiveService called outside of ClientProvider');
  }
  const exhaustiveService: ExhaustiveService = new HttpExhaustiveService(
    currentContext.fetch,
    currentContext.options,
  );
  return exhaustiveService;
};

export const useExhaustiveService = () => {
  const context = useContext(ClientContext);
  if (!context) {
    throw new Error(
      'useExhaustiveService must be used within a ClientProvider',
    );
  }
  const exhaustiveService: ExhaustiveService = new HttpExhaustiveService(
    context.fetch,
    context.options,
  );
  return exhaustiveService;
};

export const getAuthPermutationService = () => {
  if (!currentContext) {
    throw new Error(
      'getAuthPermutationService called outside of ClientProvider',
    );
  }
  const authPermutationService: AuthPermutationService =
    new HttpAuthPermutationService(
      currentContext.fetch,
      currentContext.options,
    );
  return authPermutationService;
};

export const useAuthPermutationService = () => {
  const context = useContext(ClientContext);
  if (!context) {
    throw new Error(
      'useAuthPermutationService must be used within a ClientProvider',
    );
  }
  const authPermutationService: AuthPermutationService =
    new HttpAuthPermutationService(context.fetch, context.options);
  return authPermutationService;
};
